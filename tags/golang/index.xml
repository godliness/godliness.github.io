<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Godliness</title>
    <link>https://godliness.github.io/tags/golang/</link>
    <description>Recent content in Golang on Godliness</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Aug 2017 14:36:07 +0000</lastBuildDate>
    
	<atom:link href="https://godliness.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go程序性能分析工具</title>
      <link>https://godliness.github.io/technology/profiling-go-programs/</link>
      <pubDate>Thu, 10 Aug 2017 14:36:07 +0000</pubDate>
      
      <guid>https://godliness.github.io/technology/profiling-go-programs/</guid>
      <description>&lt;p&gt;在2011年的Scala鼎盛时期，Rober Hundt 发表了一篇论文&lt;a href=&#34;http://research.google.com/pubs/pub37122.html&#34;&gt;Loop Recognition in C++/Java/Go/Scala.&lt;/a&gt; 这篇论文实现了一个特定的查找算法，例如在C++,Go,Java,Scala编译器中使用的代码流程分析，可以利用这个去画出一个程序运行的性能分析图。论文中展示的Go程序运行的相当缓慢，这是一个很好的机会来运用Go性能分析工具去分析这个缓慢程序，并使它运行的快起来。&lt;/p&gt;

&lt;p&gt;通过使用Go性能分析工具来找到程序正确的性能瓶颈，可以让Go程序运行的快一个数量级，并减少6倍的内存占用。（更新：由于最近的gcc里面libstdc++的优化，内存占用减少了3.7倍多）&lt;/p&gt;

&lt;p&gt;Hundt的论文没有指定是使用的哪个版本的C++, Go, Java,和Scala工具。在这篇文章中，我们将使用最新的每周发布的6g Go编译器快照和Ubuntu Natty发行版附带g ++的版本。（我们将不会使用Java或者Scala,因为我们不擅长使用这些语言来写出有效率的程序，所以在这些语言中进行对比的话会有些不公平。由于C++是论文中所述最快的语言，所以和C++来进行对比就足够了。）（更新：在更新过的文章中，我们将要使用最近在amd64平台上开发的Go编译器的快照，并使用在2013年3月份发布的g++最新版本4.8.0）&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go In Action</title>
      <link>https://godliness.github.io/technology/go-in-action-records/</link>
      <pubDate>Thu, 25 May 2017 10:10:55 +0000</pubDate>
      
      <guid>https://godliness.github.io/technology/go-in-action-records/</guid>
      <description> Channel之所以并发安全的原因是通过复制内存的方式来进行共享内存。 main.go 文件中 init 方法会在 main 方法之前执行 main方法在main包中才会编译出可执行文件 import 语句中的下划线“_”，其实就是初始化后面引入的包，调用包中的init方法 package中小写字母开头的变量是不可导出（不可被其他包访问）的，而大写字母开头的变量是可以导出的，可以通过函数返回不可导出的变量 引用型的变量不初始化就使用会报错，因为引用变量的默认值是nil var关键字会将变量初始化为它的零值，而:=关键字则不是，可以是一个函数调用的返回也可以是自定义的初始化方法。 在main方法结束前来结束所有的go协程会减少bug和错误 for range 的第二个参数其实就是value的复制元素 函数传参都是值拷贝 定义常量时不需要指定类型 定义接口时，若方法只有一个，那么它的命名需要加上后缀“er” 若调用对象为引用类型，函数的接收者为值类型，那么编译器就会自动的进行对象反引用，反之亦然 接收类型为引用类型的方法不能被赋值为值的接口调用，接收类型为值类型的方法，可以被赋值类型为引用类型和值类型的接口调用 接口类型的实现可以是某个类的引用类型也可以是值类型 array := [&amp;hellip;]int{10, 20, 30, 40, 50} 这种方式声明数组无需指定数组长度 array := [5]int{1: 10, 2: 20} 指定特定位置为固定的值 slice := []int{10, 20, 30, 40, 50} 创建长度为5的数组切片 一个线程绑定到一个逻辑处理器上，多个协程被添加到逻辑任务队列中，由go运行时调度器进行调度，当有一个协程调用了系统blocking syscall后，这个线程就会从该逻辑处理器中卸下来，继续等待，调度器会再创建一个线程来绑定到该逻辑处理器上，并从运行队列中挑选一个go协程来运行。 若一个go协程需要进行一个网络I/O调用，那么该协程就会从逻辑处理器上卸下来并转移到由go运行时构造的网络轮询器上，当轮询器检测到读或写操作准备好后，该go协程就会重新调度到逻辑处理器上去处理相应的操作 默认的运行时可以启动的线程数是10000，这个值可以通过SetMaxThreads方法更改，当线程数超过最大值，程序将崩溃。 并发的实质是一个物理CPU(也可以多个物理CPU) 在若干道程序之间多路复用，并发性是对有限物理资源强制行使多用户共享以提高效率。 并行性指两个或两个以上事件或活动在同一时刻发生。在多道程序环境下，并行性使多个程序同一时刻可在不同CPU上同时执行。 若想go协程真正的并行运行，那么就必须运行的多物理处理器的机器上若机器只有一个处理器，就算是多线程也只是并发而已 单元测试的方法必须以Test开头，接收参数是Test的指针类型，无返回值，这样才能被识别为单元测试方法  </description>
    </item>
    
    <item>
      <title>Go语言CodeReivew注释总结</title>
      <link>https://godliness.github.io/technology/go-comments-review/</link>
      <pubDate>Fri, 12 May 2017 22:53:28 +0000</pubDate>
      
      <guid>https://godliness.github.io/technology/go-comments-review/</guid>
      <description>Gofmt 在你的代码上运行gofmt来自动修复大多数刻板的样式问题。绝大部分的Go代码都会使用gofmt进行格式化代码。本文余下的部分会讲一下写非刻板的样式问题。另一种方法是使用goimports，gofmt的超集，额外添加（和删除）必要的导入行。
注释语句 参考 https://golang.org/doc/effective_go.html#commentary。注释文档的声明应该是个完整的句子，即使看起来有一些冗余。这样的话当我们导出godoc文档的时候，格式会看起来比较好一些。注释应该以要描述的内容开头并以句号来结束:
// Request represents a request to run a command. type Request struct { ... // Encode writes the JSON encoding of req to w. func Encode(w io.Writer, req *Request) { ...  注意除了句号以外，也可以使用（!,?）来结束注释。除此之外，还有很多工具可以用来标识types和method（例如 easyjson: json和golint的MATCH）。这样的规则很难被格式化。
Contexts context.Context类型的值可以携带一些可以跨API和进程边界的安全凭证，跟踪信息，截止时间，取消信号。Go程序可以明确地传送上下文到函数调用的整个调用链，从进来的RPC和HTTP请求到出去的响应体。
大多数的函数通过第一个参数来接收Context对象：
func F(ctx context.Context, /* other arguments */) {}  一个不需要与特定请求绑定的函数可能会使用context.Background()，即使你认为你不需要上下文也要传递Context参数，要不然就会报错，默认的情况下，我们都会使用context.Background()来直接获得Context对象，除非你有充分的理由说明这么做是错的。
不要添加Context成员到结构体中；而是将ctx参数添加到需要传递该类型的每种方法上。唯一的例外就是调用的方法要与标准库或第三方库中的接口相匹配。
不要创建自定义的Context类型或使用Context以外的接口。
如果你有应用数据需要传递，请将其置于接收器的参数中，使用全局变量，或者如果它真的应该存入Context中，则才将其存入。
Context是不可变的，所以我们可以传递相同的ctx参数到多个方法调用，来共享截止时间，取消信号，凭证，以及追踪信息等等。
Copying 为了避免意外的情形，当从一个包中复制结构体的时候要小心一些。例如，bytes.Buffer类型中包含一个[]byte切片，并且对于短字符串的优化，切片可能会引用一个小的字节数组。如果你复制了Buffer,副本中的切片可能会替换原始的数组，从而导致后续的方法调用会产生奇怪的效果。
一般来说，请不要复制值类型T,如果它的方法中有关联到指针类型*T。
声明空的切片 当声明空的切片时，优先选择
var t []string  其次是
t := []string{}  前者声明了一个nil的切片，然后后者则声明了一个non-nil的切片，长度为0.</description>
    </item>
    
    <item>
      <title>Go语言学习笔记</title>
      <link>https://godliness.github.io/technology/go-language-study-records/</link>
      <pubDate>Thu, 06 Apr 2017 17:17:16 +0000</pubDate>
      
      <guid>https://godliness.github.io/technology/go-language-study-records/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对读Chanel进行Close操作会失败&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对关闭了的Chanel进行写操作会失败&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;单向Channel无法再转换回双向Channel&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;关键字go并非执行并发操作，而是创建一个并发任务单元。新建任务被放置在系统队列中，等待调度器安排合适系统线程去获取执行权。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;每个任务单元除保存函数指针，调用参数外，还会分配执行所需的栈内存空间。相比系统默认MB级别的线程栈，groutine自定义栈初始仅需2KB，所以才能创建成千上万的并发任务。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Defer 和 Go关键字，调用的函数，若参数中传入函数，那么参数中的函数会在调用的函数执行前立即执行，求出参数值。
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>