<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Go</title>
    <link>https://godliness.github.io/tags/java/</link>
    <description>Recent content in Java on Go</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Jun 2017 10:54:08 +0000</lastBuildDate>
    
	<atom:link href="https://godliness.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java编程思想</title>
      <link>https://godliness.github.io/technology/thinking-in-java/</link>
      <pubDate>Thu, 22 Jun 2017 10:54:08 +0000</pubDate>
      
      <guid>https://godliness.github.io/technology/thinking-in-java/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Socket readline() 自动阻塞&lt;/li&gt;
&lt;li&gt;public表示紧随其后的元素对任何人都是可用的，private表示除类型创建者和类型的内部方法之外的任何人都不能访问的元素（private就像你与客户端之间的一堵墙），protected关键字与private相当，差别仅在于继承的类可以访问protected成员，但是不能访问private成员，java还有一种默认的访问权限，当没有使用前面提到的任何访问指定词时，它将发挥作用。这种权限通常被称为包访问权限，因为在这种权限下，类可以访问在同一个包中的其他类的成员，但是在包之外，这些成员如同制定了private一样。&lt;/li&gt;
&lt;li&gt;java中的变量都是静态绑定的，方法的话只有构造函数，static和final(所有private默认是final的)是静态绑定的。&lt;/li&gt;
&lt;li&gt;多态：父类的引用指向子类对象，父类引用调用子类中没有的方法时会去父类中找（如果子类中有直接调用子类，动态绑定），父类引用调用成员变量时，去调用父类的成员变量而不是子类（静态绑定）。&lt;/li&gt;
&lt;li&gt;成员变量不初始化的话，虚拟机会自动为其初始化；但是，局部变量不初始化的话，虚拟机不会自动为其初始化（报错）。&lt;/li&gt;
&lt;li&gt;switch语句可以多层叠加,也就是说多个备选条件紧靠，其中没有break的中断，那么符合这些叠加的其中任何一个元素就可以执行最后面那个case以break结尾的选项。比方物体一直滑落，直到遇到break停止。之前经过的所有选项都能被叠加在一起，作为一个判断条件。&lt;/li&gt;
&lt;li&gt;子类通过new语句建立新对象时，默认先构造父类的默认构造器。只能在构造器中调用本类的其他构造器（不能在方法中调用），而且只能调用一次且是在该构造器的第一行调用。&lt;/li&gt;
&lt;li&gt;new某个类对象时，首先初始化成员变量，其次初始化该构造器内的变量。另外是先初始化静态对象（如果它们尚未因前面的对象创建过程而被初始化），而后是“非静态”对象。&lt;/li&gt;
&lt;li&gt;static关键字不能应用于局部变量，只能应用于静态域。</description>
    </item>
    
  </channel>
</rss>