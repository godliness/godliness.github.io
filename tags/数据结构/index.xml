<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构 on Godliness</title>
    <link>https://godliness.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 数据结构 on Godliness</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Aug 2017 11:05:49 +0000</lastBuildDate>
    
	<atom:link href="https://godliness.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据结构概述</title>
      <link>https://godliness.github.io/technology/data-structure-record/</link>
      <pubDate>Mon, 28 Aug 2017 11:05:49 +0000</pubDate>
      
      <guid>https://godliness.github.io/technology/data-structure-record/</guid>
      <description>程序设计 = 数据结构 + 算法 数据：是描述客官事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。
数据元素：是组成数据的，有一定意义的基本单位，在计算机中通常作为整体处理。也被称为记录。
数据项：一个数据元素可以由若干个数据项组成，数据项是数据不可分割的最小单位。
数据对象: 是性质相同的数据元素的集合，是数据的子集。
数据结构：是相互之间存在一种或多种特定关系的数据元素的集合
逻辑结构：是指数据对象中数据元素之间的相互关系。
逻辑结构包括：集合结构，线性结构，树形结构，图形结构
物理结构：是指数据的逻辑结构在计算机中的存储形式。
物理结构包括：顺序存储结构，链式存储结构
链式存储结构：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。
数据类型:是指一组性质相同的值的集合以及定义在此集合上的一些操作的总称。
原子类型：是不可以再分解的基本类型，包括整型，实型，字符型等。
结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干个整型数据组成的。
抽象：是指抽取出事物具有的普遍性的本质。
抽象数据类型：是指一个数学模型及定义在该模型上的一组操作，抽象数据类型体现了程序设计中问题分解，抽象和信息隐藏的特性。
算法：是解决特定问题求解步骤的描述，在计算机中表现为指令的优先序列，并且每条指令表示一个或多个操作。
算法的特性：
 输入输出，算法具有0个或多个输入，至少有一个或多个输出。 有穷性，指算法在执行优先的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。 确定性，算法的每一步骤都具有确定的含义，不会出现二义性。 可行性，算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限次数完成。  算法设计的要求：
 正确性，算法的正确性是指算法至少应该具有输入，输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。 可读性，算法设计的另一目的是为了便于阅读、理解和交流。 健壮性，当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名奇妙的结果。 时间效率高和存储量低  算法效率的度量方法：
 事后统计方法，这种方法主要是通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低 事前分析估算方法，在计算机程序编制前，依据统计方法对算法进行估算。  函数的渐进增长：给定两个函数f(n)和g(n),如果存在一个整数N,使得对于所有的n&amp;gt;N,f(n)总是比g(n)大，那么，我们说f(n)的增长渐进快于g(n)。
算法时间复杂度：在进行算法分析时，语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量级。算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n)).它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐进时间复杂度，简称为时间复杂度。其中f(n)是问题规模n的某个函数。
推导大O阶的方法：
1.用常数1取代运行时间中的所有加法常数。
2.在修改后的运行次数函数中，只保留最高阶项。
3.如果最高阶项存在且不是1，则去除与这个项相乘的常数。
得到的结果就是大O阶。
常数阶：O(1)
线性阶：O(n)
对数阶：O(logn)
平方阶：O(n²)
常见时间复杂度的大小排序：
O(1) &amp;lt; O(logn) &amp;lt; O(n) &amp;lt; O(nlogn) &amp;lt; O(n²) &amp;lt; O(n³) &amp;lt; O(2的n次方) &amp;lt; O(n!) &amp;lt; O(n的n次方)</description>
    </item>
    
  </channel>
</rss>