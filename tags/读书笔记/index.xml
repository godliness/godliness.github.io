<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>读书笔记 on Marble Ma</title>
    <link>https://godliness.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 读书笔记 on Marble Ma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Aug 2017 11:05:49 +0000</lastBuildDate>
    
	<atom:link href="https://godliness.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据结构概述</title>
      <link>https://godliness.github.io/technology/data-structure-record/</link>
      <pubDate>Mon, 28 Aug 2017 11:05:49 +0000</pubDate>
      
      <guid>https://godliness.github.io/technology/data-structure-record/</guid>
      <description>程序设计 = 数据结构 + 算法 数据：是描述客官事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。
数据元素：是组成数据的，有一定意义的基本单位，在计算机中通常作为整体处理。也被称为记录。
数据项：一个数据元素可以由若干个数据项组成，数据项是数据不可分割的最小单位。
数据对象: 是性质相同的数据元素的集合，是数据的子集。
数据结构：是相互之间存在一种或多种特定关系的数据元素的集合
逻辑结构：是指数据对象中数据元素之间的相互关系。
逻辑结构包括：集合结构，线性结构，树形结构，图形结构
物理结构：是指数据的逻辑结构在计算机中的存储形式。
物理结构包括：顺序存储结构，链式存储结构
链式存储结构：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。
数据类型:是指一组性质相同的值的集合以及定义在此集合上的一些操作的总称。
原子类型：是不可以再分解的基本类型，包括整型，实型，字符型等。
结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干个整型数据组成的。
抽象：是指抽取出事物具有的普遍性的本质。
抽象数据类型：是指一个数学模型及定义在该模型上的一组操作，抽象数据类型体现了程序设计中问题分解，抽象和信息隐藏的特性。
算法：是解决特定问题求解步骤的描述，在计算机中表现为指令的优先序列，并且每条指令表示一个或多个操作。
算法的特性：
 输入输出，算法具有0个或多个输入，至少有一个或多个输出。 有穷性，指算法在执行优先的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。 确定性，算法的每一步骤都具有确定的含义，不会出现二义性。 可行性，算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限次数完成。  算法设计的要求：
 正确性，算法的正确性是指算法至少应该具有输入，输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。 可读性，算法设计的另一目的是为了便于阅读、理解和交流。 健壮性，当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名奇妙的结果。 时间效率高和存储量低  算法效率的度量方法：
 事后统计方法，这种方法主要是通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低 事前分析估算方法，在计算机程序编制前，依据统计方法对算法进行估算。  函数的渐进增长：给定两个函数f(n)和g(n),如果存在一个整数N,使得对于所有的n&amp;gt;N,f(n)总是比g(n)大，那么，我们说f(n)的增长渐进快于g(n)。
算法时间复杂度：在进行算法分析时，语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量级。算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n)).它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐进时间复杂度，简称为时间复杂度。其中f(n)是问题规模n的某个函数。
推导大O阶的方法：
1.用常数1取代运行时间中的所有加法常数。
2.在修改后的运行次数函数中，只保留最高阶项。
3.如果最高阶项存在且不是1，则去除与这个项相乘的常数。
得到的结果就是大O阶。
常数阶：O(1)
线性阶：O(n)
对数阶：O(logn)
平方阶：O(n²)
常见时间复杂度的大小排序：
O(1) &amp;lt; O(logn) &amp;lt; O(n) &amp;lt; O(nlogn) &amp;lt; O(n²) &amp;lt; O(n³) &amp;lt; O(2的n次方) &amp;lt; O(n!) &amp;lt; O(n的n次方)</description>
    </item>
    
    <item>
      <title>Java编程思想</title>
      <link>https://godliness.github.io/technology/thinking-in-java/</link>
      <pubDate>Thu, 22 Jun 2017 10:54:08 +0000</pubDate>
      
      <guid>https://godliness.github.io/technology/thinking-in-java/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Socket readline() 自动阻塞&lt;/li&gt;
&lt;li&gt;public表示紧随其后的元素对任何人都是可用的，private表示除类型创建者和类型的内部方法之外的任何人都不能访问的元素（private就像你与客户端之间的一堵墙），protected关键字与private相当，差别仅在于继承的类可以访问protected成员，但是不能访问private成员，java还有一种默认的访问权限，当没有使用前面提到的任何访问指定词时，它将发挥作用。这种权限通常被称为包访问权限，因为在这种权限下，类可以访问在同一个包中的其他类的成员，但是在包之外，这些成员如同制定了private一样。&lt;/li&gt;
&lt;li&gt;java中的变量都是静态绑定的，方法的话只有构造函数，static和final(所有private默认是final的)是静态绑定的。&lt;/li&gt;
&lt;li&gt;多态：父类的引用指向子类对象，父类引用调用子类中没有的方法时会去父类中找（如果子类中有直接调用子类，动态绑定），父类引用调用成员变量时，去调用父类的成员变量而不是子类（静态绑定）。&lt;/li&gt;
&lt;li&gt;成员变量不初始化的话，虚拟机会自动为其初始化；但是，局部变量不初始化的话，虚拟机不会自动为其初始化（报错）。&lt;/li&gt;
&lt;li&gt;switch语句可以多层叠加,也就是说多个备选条件紧靠，其中没有break的中断，那么符合这些叠加的其中任何一个元素就可以执行最后面那个case以break结尾的选项。比方物体一直滑落，直到遇到break停止。之前经过的所有选项都能被叠加在一起，作为一个判断条件。&lt;/li&gt;
&lt;li&gt;子类通过new语句建立新对象时，默认先构造父类的默认构造器。只能在构造器中调用本类的其他构造器（不能在方法中调用），而且只能调用一次且是在该构造器的第一行调用。&lt;/li&gt;
&lt;li&gt;new某个类对象时，首先初始化成员变量，其次初始化该构造器内的变量。另外是先初始化静态对象（如果它们尚未因前面的对象创建过程而被初始化），而后是“非静态”对象。&lt;/li&gt;
&lt;li&gt;static关键字不能应用于局部变量，只能应用于静态域。</description>
    </item>
    
    <item>
      <title>Go In Action</title>
      <link>https://godliness.github.io/technology/go-in-action-records/</link>
      <pubDate>Thu, 25 May 2017 10:10:55 +0000</pubDate>
      
      <guid>https://godliness.github.io/technology/go-in-action-records/</guid>
      <description> Channel之所以并发安全的原因是通过复制内存的方式来进行共享内存。 main.go 文件中 init 方法会在 main 方法之前执行 main方法在main包中才会编译出可执行文件 import 语句中的下划线“_”，其实就是初始化后面引入的包，调用包中的init方法 package中小写字母开头的变量是不可导出（不可被其他包访问）的，而大写字母开头的变量是可以导出的，可以通过函数返回不可导出的变量 引用型的变量不初始化就使用会报错，因为引用变量的默认值是nil var关键字会将变量初始化为它的零值，而:=关键字则不是，可以是一个函数调用的返回也可以是自定义的初始化方法。 在main方法结束前来结束所有的go协程会减少bug和错误 for range 的第二个参数其实就是value的复制元素 函数传参都是值拷贝 定义常量时不需要指定类型 定义接口时，若方法只有一个，那么它的命名需要加上后缀“er” 若调用对象为引用类型，函数的接收者为值类型，那么编译器就会自动的进行对象反引用，反之亦然 接收类型为引用类型的方法不能被赋值为值的接口调用，接收类型为值类型的方法，可以被赋值类型为引用类型和值类型的接口调用 接口类型的实现可以是某个类的引用类型也可以是值类型 array := [&amp;hellip;]int{10, 20, 30, 40, 50} 这种方式声明数组无需指定数组长度 array := [5]int{1: 10, 2: 20} 指定特定位置为固定的值 slice := []int{10, 20, 30, 40, 50} 创建长度为5的数组切片 一个线程绑定到一个逻辑处理器上，多个协程被添加到逻辑任务队列中，由go运行时调度器进行调度，当有一个协程调用了系统blocking syscall后，这个线程就会从该逻辑处理器中卸下来，继续等待，调度器会再创建一个线程来绑定到该逻辑处理器上，并从运行队列中挑选一个go协程来运行。 若一个go协程需要进行一个网络I/O调用，那么该协程就会从逻辑处理器上卸下来并转移到由go运行时构造的网络轮询器上，当轮询器检测到读或写操作准备好后，该go协程就会重新调度到逻辑处理器上去处理相应的操作 默认的运行时可以启动的线程数是10000，这个值可以通过SetMaxThreads方法更改，当线程数超过最大值，程序将崩溃。 并发的实质是一个物理CPU(也可以多个物理CPU) 在若干道程序之间多路复用，并发性是对有限物理资源强制行使多用户共享以提高效率。 并行性指两个或两个以上事件或活动在同一时刻发生。在多道程序环境下，并行性使多个程序同一时刻可在不同CPU上同时执行。 若想go协程真正的并行运行，那么就必须运行的多物理处理器的机器上若机器只有一个处理器，就算是多线程也只是并发而已 单元测试的方法必须以Test开头，接收参数是Test的指针类型，无返回值，这样才能被识别为单元测试方法  </description>
    </item>
    
    <item>
      <title>Go语言学习笔记</title>
      <link>https://godliness.github.io/technology/go-language-study-records/</link>
      <pubDate>Thu, 06 Apr 2017 17:17:16 +0000</pubDate>
      
      <guid>https://godliness.github.io/technology/go-language-study-records/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对读Chanel进行Close操作会失败&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对关闭了的Chanel进行写操作会失败&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;单向Channel无法再转换回双向Channel&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;关键字go并非执行并发操作，而是创建一个并发任务单元。新建任务被放置在系统队列中，等待调度器安排合适系统线程去获取执行权。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;每个任务单元除保存函数指针，调用参数外，还会分配执行所需的栈内存空间。相比系统默认MB级别的线程栈，groutine自定义栈初始仅需2KB，所以才能创建成千上万的并发任务。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Defer 和 Go关键字，调用的函数，若参数中传入函数，那么参数中的函数会在调用的函数执行前立即执行，求出参数值。
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>